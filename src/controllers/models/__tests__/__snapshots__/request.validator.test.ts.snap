// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`validateRequest it should return an error when filterApplied is invalid 1`] = `[Error: filtersApplied[0] must be a \`string\` type, but the final value was: \`33\`.]`;

exports[`validateRequest it should return an error when filterConfig is invalid 1`] = `[Error: Filter Config Error: The filter configuration cannot be empty]`;

exports[`validateRequest it should return an error when order by is invalid 1`] = `[Error: Request Error: The order by property must be a string matching an indexed property name of your object]`;

exports[`validateRequest it should return an error when order direction is invalid 1`] = `[Error: Request Error: The order direction property must be either "ASC" | "DESC"]`;

exports[`validateRequest it should return an error when per page is invalid 1`] = `[Error: Request Error: The per page property must be a natural number]`;

exports[`validateRequest it should return an error when per page is invalid 2`] = `[Error: Request Error: The page property must be a natural number]`;

exports[`validateRequest it should return an error when per page is invalid number 1`] = `[Error: Request Error: The per page property must be a natural number]`;

exports[`validateRequest it should return an error when per page is invalid number 2`] = `[Error: Request Error: The page property must be a natural number]`;

exports[`validateRequest it should return an error when storeId is invalid 1`] = `[Error: Request Error: The store Id must be a string.]`;

exports[`validateRequest it should return the request when the validation succeeds (optional fields are omitted) 1`] = `
Object {
  "filterConfig": Array [
    Array [
      Object {
        "field": "price",
        "id": "priceMin",
        "operand": 200,
        "operator": "gt",
      },
    ],
    Array [
      Object {
        "field": "price",
        "id": "priceMax",
        "operand": 500,
        "operator": "lt",
      },
    ],
    Array [
      Object {
        "field": "numberOfPeople",
        "id": "numberOfPeople",
        "operand": 2,
        "operator": "equals",
      },
    ],
    Array [
      Object {
        "field": "activity",
        "id": "activity-1",
        "operand": "swimming",
        "operator": "contains",
      },
      Object {
        "field": "activity",
        "id": "activity-2",
        "operand": "tennis",
        "operator": "contains",
      },
      Object {
        "field": "activity",
        "id": "activity-3",
        "operand": "golfing",
        "operator": "contains",
      },
    ],
  ],
  "filtersApplied": Array [],
  "storeId": "items",
}
`;

exports[`validateRequest it should return the request when the validation succeeds 1`] = `
Object {
  "filterConfig": Array [
    Array [
      Object {
        "field": "price",
        "id": "priceMin",
        "operand": 200,
        "operator": "gt",
      },
    ],
    Array [
      Object {
        "field": "price",
        "id": "priceMax",
        "operand": 500,
        "operator": "lt",
      },
    ],
    Array [
      Object {
        "field": "numberOfPeople",
        "id": "numberOfPeople",
        "operand": 2,
        "operator": "equals",
      },
    ],
    Array [
      Object {
        "field": "activity",
        "id": "activity-1",
        "operand": "swimming",
        "operator": "contains",
      },
      Object {
        "field": "activity",
        "id": "activity-2",
        "operand": "tennis",
        "operator": "contains",
      },
      Object {
        "field": "activity",
        "id": "activity-3",
        "operand": "golfing",
        "operator": "contains",
      },
    ],
  ],
  "filtersApplied": Array [
    "priceMin",
  ],
  "orderBy": "price",
  "orderDirection": "ASC",
  "page": 2,
  "perPage": 5,
  "storeId": "items",
}
`;
